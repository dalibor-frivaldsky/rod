#pragma once

#include <boost/hana/tuple.hpp>
#include <utility>


namespace rod {

	namespace detail {

		template< typename... FQs >
		constexpr auto deduce_tags(FQs&&...) {
			return boost::hana::tuple{
				boost::hana::type_c< typename FQs::tag >...
			};
		}

	}

	template< typename Source, typename... FQs >
	auto query_entities(Source&&, FQs&&...);

	template< typename Entities, typename... FQs >
	auto filter_entities(Entities&&, FQs&&...);

	auto resolve = [] (auto&&... fqs) {
		return [fqs...] (auto&& source) {
			return filter_entities(
				query_entities(
					std::forward< decltype(source) >(source),
					fqs...
				),
				fqs...
			);
		};
	};

}
