#pragma once

#include <boost/callable_traits.hpp>
#include <rod/concept/Callable>
#include <rod/feature/instance/instance>
#include <rod/feature/instance/as>
#include <rod/get>
#include <rod/resolve>
#include <type_traits>
#include <utility>


namespace rod {

	namespace detail {

		template< typename... Args >
		struct with_impl {
			template< Callable Fn, typename Source >
			static
			auto call( Fn&& fn, Source&& source ) {
				using namespace feature::query;
				
				return fn(
					std::get< 0 >(
						std::forward<Source>(source) | resolve(instance{ as< Args > }) | get
					)...
				);
			}

		};

	}
	
	auto with = [] (Callable&& withFn) {
		return [&] (auto&& source) {
			return boost::callable_traits::expand_args_t<
				typename std::decay< decltype(withFn) >::type,
				detail::with_impl
			>::template call(
				std::forward< decltype(withFn) >(withFn),
				std::forward< decltype(source) >(source)
			);
		};
	};

}