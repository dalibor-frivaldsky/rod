// Copyright Dalibor Frivaldsky 2017
// Distributed under the Boost Software License, Version 1.0.
// See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt

#pragma once

#include <tuple>
#include <type_traits>
#include <utility>


namespace rod {

	namespace detail {

		template< typename Tuple, std::size_t... I >
		constexpr auto get_extract(Tuple&& tuple, std::index_sequence< I... >) {
			return std::tuple<
				decltype(std::get< I >(std::forward< Tuple >(tuple))())...
			>{
				std::get< I >(std::forward< Tuple >(tuple))()...
			};
		}

	}
	
	auto get = [] (auto&& source) {
		constexpr std::size_t	entityCount =
			std::tuple_size_v<
				std::decay_t< decltype(get_impl(std::forward<decltype(source)>(source))) >
			>;

		return detail::get_extract(
			get_impl(std::forward<decltype(source)>(source)),
			std::make_index_sequence< entityCount >{}
		);
	};

	auto get_all = [] (auto&& source) {
		return get_all_impl(
			std::forward< decltype(source) >(source),
			[] (auto&& e) {
				constexpr std::size_t	entityCount =
					std::tuple_size_v< std::decay_t< decltype(e) > >;

				return detail::get_extract(
					std::forward< decltype(e) >(e),
					std::make_index_sequence< entityCount >{}
				);
			}
		);
	};

}