// Copyright Dalibor Frivaldsky 2017
// Distributed under the Boost Software License, Version 1.0.
// See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt

#pragma once

#include <boost/hana/concept/monad.hpp>
#include <boost/hana/filter.hpp>
#include <boost/hana/transform.hpp>
#include <boost/hana/tuple.hpp>
#include <boost/hana/type.hpp>
#include <rod/feature/instance/instance_tag>
#include <rod/feature/type/type_tag>
#include <rod/integration/boost/hana_concept>
#include <rod/source/build/entity>
#include <tuple>
#include <type_traits>
#include <utility>


namespace rod {
namespace source {
namespace detail {

	template< typename T >
	concept bool HanaType() {
		return (bool)(boost::hana::type_c< typename std::decay_t< T >::type >
			==
		std::decay_t< T >{});
	}

	template< typename T >
	struct entity_generator;

	template< typename T >
	struct entity_generator< boost::hana::basic_type< T > > {
		static
		constexpr auto generate(boost::hana::type< T > v) {
			return boost::hana::tuple(
				build::entity{
					build::feature_provider{
						feature::type_tag{},
						[] { return boost::hana::type_c< T >; }
					}
				}
			);
		}
	};

	template< typename T >
	struct entity_generator< T& > {
		static
		constexpr auto generate(T& v) {
			return boost::hana::tuple(
				build::entity{
					build::feature_provider{
						feature::instance_tag{},
						[&] { return v; }
					},
					build::feature_provider{
						feature::type_tag{},
						[] { return boost::hana::type_c< T >; }
					}
				},
				build::entity{
					build::feature_provider{
						feature::instance_tag{},
						[&] ()-> T& { return v; }
					},
					build::feature_provider{
						feature::type_tag{},
						[] { return boost::hana::type_c< T >; }
					}
				},
				build::entity{
					build::feature_provider{
						feature::instance_tag{},
						[&] { return &v; }
					},
					build::feature_provider{
						feature::type_tag{},
						[] { return boost::hana::type_c< T >; }
					}
				}
			);
		}
	};

	template< typename T >
	struct entity_generator< T*& > {
		static
		constexpr auto generate(T*& v) {
			return boost::hana::tuple(
				build::entity{
					build::feature_provider{
						feature::instance_tag{},
						[=] { return *v; }
					},
					build::feature_provider{
						feature::type_tag{},
						[] { return boost::hana::type_c< T >; }
					}
				},
				build::entity{
					build::feature_provider{
						feature::instance_tag{},
						[=] ()-> T& { return *v; }
					},
					build::feature_provider{
						feature::type_tag{},
						[] { return boost::hana::type_c< T >; }
					}
				},
				build::entity{
					build::feature_provider{
						feature::instance_tag{},
						[=] { return v; }
					},
					build::feature_provider{
						feature::type_tag{},
						[] { return boost::hana::type_c< T >; }
					}
				}
			);
		}
	};

}}}


namespace boost {
namespace hana {

	template< rod::integration::hana_concept< Monad > Monad, typename... FQs >
	constexpr auto query_entities(Monad&& monad, FQs&&...) {
		return monad | [] (auto&& v) {
			if constexpr(rod::source::detail::HanaType< decltype(v) >()) {
				return rod::source::detail::entity_generator<
					boost::hana::basic_type< typename std::decay_t< decltype(v) >::type >
				>::generate(
					std::forward< decltype(v) >(v)
				);
			}
			else {
				return rod::source::detail::entity_generator< decltype(v) >::generate(
					std::forward< decltype(v) >(v)
				);
			}
		};
	}

	template< rod::integration::hana_concept< Monad > Monad, typename... FQs >
	constexpr auto filter_entities(Monad&& monad, FQs&&... fqs) {
		return transform(
			filter(
				monad,
				[&] (auto&& entity) {
					constexpr auto fulfillsQueries =
						(... && !std::is_same_v< decltype(fqs(entity)), void >);

					if constexpr(fulfillsQueries) {
						return true_c;
					}
					else {
						return false_c;
					}
				}
			),
			[&] (auto&& entity) {
				return std::make_tuple(
					fqs(entity)...
				);
			}
		);
	}
	
}}