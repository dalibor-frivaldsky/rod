#pragma once

#include <boost/hana/concept/monad.hpp>
#include <boost/hana/filter.hpp>
#include <boost/hana/transform.hpp>
#include <boost/hana/tuple.hpp>
#include <rod/feature/instance/instance_tag>
#include <rod/integration/boost/hana_concept>
#include <tuple>
#include <type_traits>
#include <utility>


namespace rod {
namespace source {
namespace detail {

	template< typename InstanceResolver >
	struct hana_tuple_entity {
		InstanceResolver	instanceResolver;

		constexpr hana_tuple_entity(InstanceResolver&& instanceResolver):
		  instanceResolver(std::forward< InstanceResolver >(instanceResolver))
		{}

		constexpr auto operator() (feature::instance_tag) {
			return instanceResolver;;
		}
	};

	template< typename T >
	constexpr auto generate_entities( T& v ) {
		return boost::hana::tuple(
			hana_tuple_entity{ [&] { return v; } },
			hana_tuple_entity{ [&] ()-> T& { return v; } },
			hana_tuple_entity{ [&] { return &v; } }
		);
	}

	template< typename T >
	constexpr auto generate_entities( T* v ) {
		return boost::hana::tuple(
			hana_tuple_entity{ [&] { return *v; } },
			hana_tuple_entity{ [&] ()-> T& { return *v; } },
			hana_tuple_entity{ [&] { return v; } }
		);
	}

}}}


namespace boost {
namespace hana {

	template< rod::integration::hana_concept< Monad > Monad, typename... FQs >
	constexpr auto query_entities(Monad&& monad, FQs&&... fqs) {
		return monad | [] (auto&& v) {
			return rod::source::detail::generate_entities(
				std::forward< decltype(v) >(v)
			);
		};
	}

	template< rod::integration::hana_concept< Monad > Monad, typename... FQs >
	constexpr auto filter_entities(Monad&& monad, FQs&&... fqs) {
		return transform(
			filter(
				monad,
				[&] (auto&& entity) {
					constexpr auto fulfillsQueries =
						(... && !std::is_same_v< decltype(fqs(entity)), void >);

					if constexpr(fulfillsQueries) {
						return true_c;
					}
					else {
						return false_c;
					}
				}
			),
			[&] (auto&& entity) {
				return std::make_tuple(
					fqs(entity)...
				);
			}
		);
	}
	
}}