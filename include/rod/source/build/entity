// Copyright Dalibor Frivaldsky 2017
// Distributed under the Boost Software License, Version 1.0.
// See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt

#pragma once

#include <utility>


namespace rod {
namespace source {
namespace build {

	template< typename... Providers >
	struct entity: Providers... {

		using Providers::operator()...;

		constexpr entity(Providers&&... providers):
		  Providers(std::forward< Providers >(providers))...
		{}

	};

	template< typename Tag, typename Resolver >
	struct feature_provider {

		constexpr feature_provider(Tag&&, Resolver&& resolver):
		  resolver(std::forward< Resolver >(resolver))
		{}

		constexpr const Resolver& operator() (Tag&&) const {
			return resolver;
		}

	private:
		Resolver	resolver;

	};

}}}