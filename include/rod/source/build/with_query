#pragma once

#include <boost/hana/equal.hpp>
#include <boost/hana/find_if.hpp>
#include <boost/hana/not.hpp>
#include <boost/hana/optional.hpp>
#include <boost/hana/tuple.hpp>
#include <type_traits>
#include <utility>


namespace rod {
namespace source {
namespace build {

	template< typename Tag, typename MatchFn, typename NoMatchFn, typename... Qs >
	decltype(auto) with_query(MatchFn&& matchFn, NoMatchFn&& noMatchFn, Qs&&... qs) {
		using namespace boost::hana;

		auto tagQuery = find_if(
			tuple< Qs&&... >{ std::forward< Qs >(qs)... },
			[] (auto&& q) {
				return type_c< typename std::decay_t< decltype(q) >::tag > == type_c< Tag >;
			}
		);
		if constexpr(!is_nothing(tagQuery)) {
			return matchFn(*tagQuery);
		}
		else {
			return noMatchFn();
		}
	}

}}}