#pragma once

#include <rod/feature/instance/instance_tag>
#include <tuple>
#include <type_traits>
#include <utility>


namespace rod {
namespace feature {
namespace query {

	template< typename... Qs >
	struct instance {

		static_assert(sizeof...(Qs) <= 1, "instance query accepts up to one subquery");

		using tag = instance_tag;

		instance(Qs&&... qs):
		  qs(std::forward< Qs >(qs)...)
		{}

		template< typename E >
		constexpr decltype(auto) operator() (E&& e) const {
			if constexpr(std::is_callable_v< E(tag) >) {
				if constexpr(sizeof...(Qs) == 1) {
					return std::get< 0 >(qs)(e(tag{}));
				}
				else {
					return e(tag{});
				}
			}
		}

	private:
		std::tuple< Qs... >	qs;

	};
	
}}}